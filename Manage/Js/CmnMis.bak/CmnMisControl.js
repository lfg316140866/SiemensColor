CmnMis_UI_Control_Version = "3.2.0", "undefined" == typeof CmnMis && (CmnMis = {}), CmnMis.UI || (CmnMis.UI = {}), function () { CmnMis.UI.Control || CmnAjax.Func.LoadJs(Cmn.Func.GetRoot() + "Manage/Js/CmnMis/CmnMisControlOpt.js"); var a = CmnMis.UI.Control || (CmnMis.UI.Control = {}); a.BasControl = function (b, c) { var d = this, e = !0; this.ControlCfg = $.extend({ Layout: { Left: void 0, Top: void 0, DescAlign: "", DescWidth: 160, DescHeight: 33 }, Default: void 0, IsReadOnly: "0", LinkControlName: "", IsRequired: "0", RegexContent: void 0, RegexErrorMsg: void 0, ColHint: void 0 }, Cmn.IsType(c, "string") ? $.parseJSON(c) : c), this.ControlDom = $("<div>").addClass(Cmn.Str.GetSelectorName(CmnMis.UI.Control.Selector.Container)).css({ position: "relative", padding: "5px 0px" }), this.ControlCfg.RegexErrorMsg = "【" + this.ControlCfg.ColTitle + " ， " + this.ControlCfg.RegexErrorMsg || "录入数据有误！】", this.ControlDom.find(a.Selector.CtlTipDesc).hide(), this.CfgDescCfg = { Width: { Type: "Text", Desc: "控件宽度", Val: "260" }, Height: { Type: "Text", Desc: "控件高度", Val: "33" }, LinkControlName: { Type: "Text", Desc: "联动字段名称" }, Left: { Type: "Text", Desc: "控件Left位置", Parent: "Layout" }, Top: { Type: "Text", Desc: "控件Top位置", Parent: "Layout" }, DescWidth: { Type: "Text", Desc: "控件描述的宽度", Val: "160", Parent: "Layout" }, DescHeight: { Type: "Text", Desc: "控件描述的高度", Val: "33", Parent: "Layout" }, IsReadOnly: { Type: "RadioButton", Desc: "是否只读", Val: [{ key: "0", val: "否" }, { key: "1", val: "是" }] }, IsShowColDesc: { Type: "RadioButton", Desc: "是否显示字段描述", Val: [{ key: "1", val: "是" }, { key: "0", val: "否" }] }, Height: { Type: "Text", Desc: "控件高度", Val: "33" }, Default: { Type: "Text", Desc: "默认值" } }, this.KeyName = b, this.Type = "BasControl", this.IsExistHtmlTemp = !1, this.IsSetValByKey = !1, this.OnChange = new Cmn.Event(this), this.OnFocus = new Cmn.Event(this), this.OnBlur = new Cmn.Event(this), this.OnKeydown = new Cmn.Event(this), this.OnKeyup = new Cmn.Event(this), this.OnFocus.Add(function () { if (this.ControlCfg.ColHint) { var b = this.ControlDom.find(a.Selector.CtlTipDesc); b.show(), b.html() || (b.html(" * " + this.ControlCfg.ColHint), b.css({ top: (this.ControlDom.height() - b.height()) / 2 })) } }, "cmn-Frame-Control-Focus"), this.OnBlur.Add(function () { this.ControlCfg.ColHint && this.ControlDom.find(a.Selector.CtlTipDesc).hide() }, "cmn-Frame-Control-Blur"), this.CreateHtml = function () { var b = this.GetInitHtml(), c = '<div style="width:100%;height:100%;position:relative;"><div class="cmn-Ctl-TipDesc" style="width: 100%;  position: absolute;left:100%; text-align: left; color: #F7573A;"></div><div style="width:100%;height:100%;"><div class="cmn-Ctl-ColNameContainer" style="padding-right: 10px;width: 35%; height: 100%; float: left; zoom: 1;  font-size: 16px; color: #505050; line-height: 30px; text-align: right; "><span class="cmn-Ctl-ColIsRequired" style="color: #F7573A;">*</span><span class="cmn-Ctl-ColName">:</span></div><div class="cmn-Ctl-Content" style="width: 62%; height: 100%; float: left; zoom: 1; border-radius: 5px; ">' + (b || "") + "</div>" + "</div>" + "</div>"; $(b).hasClass(Cmn.Str.GetSelectorName(a.Selector.Container)) ? this.ControlDom = $(b) : (this.ControlDom.find(a.Selector.CtlContent).length > 0 ? this.ControlDom.find(a.Selector.CtlContent).html() ? this.ControlDom.find(".cmn-control").html() || this.ControlDom.find(".cmn-control").append(b) : this.ControlDom.find(a.Selector.CtlContent).append(b) : this.ControlDom.empty().append(c), this.ControlDom.find(a.Selector.ColNameContainer).css({ height: this.ControlCfg.Layout.DescHeight + "px", width: 1 * this.ControlCfg.Layout.DescWidth + "px", "line-height": (this.ControlCfg.Layout.DescHeight || this.ControlCfg.Height) + "px" }), this.ControlDom.find(a.Selector.CtlContent).css({ width: 1 * this.ControlCfg.Width + "px", height: this.ControlCfg.Height + "px", "line-height": this.ControlCfg.Height + "px" }), this.ControlDom.css({ width: 1 * this.ControlCfg.Layout.DescWidth + 1 * this.ControlCfg.Width + 20, height: this.ControlCfg.Height })), "1" != this.ControlCfg.IsRequired ? this.ControlDom.find(a.Selector.ColIsRequired).hide() : this.ControlDom.find(a.Selector.ColIsRequired).show(), this.ControlDom.attr("data-control-type", this.Type), this.ControlDom.attr("name", this.KeyName) }, this.GetInitHtml = function () { return a.CustomControlCache[this.Type] }, this.SetCfgDescCfg = function (a) { Cmn.IsType(a, "object") && ($.each(a, function (b) { d.CfgDescCfg[b] && (d.CfgDescCfg[b] = a[b], a[b] = void 0) }), d.CfgDescCfg = Cmn.Extend(a, d.CfgDescCfg)) }, this.AppendTo = function (b) { var c = $(b).find(a.Selector.Container + "[name='" + this.KeyName + "']"); 0 == c.length && (c = $(b).find(a.Selector.CtlContent + "[name='" + this.KeyName + "']").parents(a.Selector.Container)), 0 == c.length && (c = $(b).find(".cmn-control[name='" + this.KeyName + "']")), c.length > 0 ? Cmn.Str.Trim(c.html()) ? this.ControlDom = c : this.ControlDom.replaceAll(c) : $(b).append(this.ControlDom), c.find(a.Selector.CtlContent).length <= 0 && this.CreateHtml(), this.ControlDom.data("control", this) }, this.SetColDesc = function (b) { "" == b ? (this.ControlDom.find(".cmn-Ctl-ColNameContainer").remove(), this.ControlDom.find(".cmn-Ctl-Content").css({ width: "100%" })) : this.ControlDom.find(a.Selector.ColName).html(b + " : ") }, this.InitControl = function () { }, this.ReLoadData = function () { }, this.InitControlConfig = function (a) { var b = this.ControlDom.attr("cg-ctl-cfg") || this.ControlDom.attr("control-config"); return Cmn.IsType(b, "string") && (b = $.parseJSON(b), b["Default"] || (b["Default"] = void 0)), a ? (Cmn.IsType(a, "string") && (a = $.parseJSON(a)), $.each(a, function (b) { a[b] || 0 == a[b] || "Default" == b || (a[b] = void 0) })) : a = {}, $.each(d.CfgDescCfg, function (b) { Cmn.IsType(d.CfgDescCfg[b], "object") && !a[b] && "Default" != b && (a[b] = Cmn.IsType(d.CfgDescCfg[b].Val, "array") ? d.CfgDescCfg[b].Val[0]["key"] : d.CfgDescCfg[b].Val) }), this.ControlCfg = Cmn.Extend(b, a), this.ControlCfg }, this.VerifyInput = function (b, c) { var d = this, e = "", f = Cmn.Func.GetNoHTMLFormatStr(d.GetValue()), g = !0, h = ""; if ("1" == d.ControlCfg.IsRequired && (e = /\S/, f || (f = ""), e.test($.trim(f)) || (h = d.ControlCfg.ColTitle + " : " + "为必填项！", g = !1)), e = d.ControlCfg.RegexContent, e && g) { if (!Cmn.IsType(e, "string")) return console.error(e.toString() + "正则表达式类型不对！"), !0; "/" == e[0] && (e = e.substr(1, e.length - 2)), e = new RegExp(e), f || (f = ""), e.test($.trim(f)) || (g = !1, h = d.ControlCfg.RegexErrorMsg) } return g ? (d.ControlDom.find(a.Selector.CtlVerifyRight).show(), d.ControlDom.find(a.Selector.CtlVerifyError).hide(), $(b).hide().html(""), !0) : (d.ControlDom.find(a.Selector.CtlVerifyError).show(), d.ControlDom.find(a.Selector.CtlVerifyRight).hide(), d.ControlDom.find(a.Selector.CtlErrTipDesc).html(h), d.ControlDom.find(a.Selector.CtlErrTipDesc).show(), d.ControlDom.find(a.Selector.CtlTipDesc).hide(), $(b).show().html(h), c && c.call(d, $.extend(new Cmn.ErrMsg(h), { control: d })), !1) }, this.Init = function () { this.SetValue(this.ControlCfg.Default || "") }, this.GetValue = function () { }, this.SetValue = function () { }, this.SetWidth = function (a) { this.ControlDom.css({ width: a }) }, this.SetHeight = function (a) { this.ControlDom.css({ height: a }) }, this.SetPosition = function (a, b) { this.ControlDom.css({ left: a, top: b }) }, this.SetEnabled = function (b) { e = b; var c = d.ControlDom.find(a.Selector.CtlContent); e ? (c.find("input").attr("disabled", !1), c.css({ border: c.attr("border-value") })) : (c.find("input").attr("disabled", !0), c.attr("border-value", c.css("border")), c.css({ border: "none" }), c.css({ "border-bottom": "1px dashed #e6e6e6" })) }, this.GetEnabled = function () { return e }, this.SetFocus = function () { this.ControlDom.find("input").focus() } }, a.Text = function (b, c) { Cmn.Object.Inherit(this, a.BasControl, [b, c]); var d = this; d.Type = "Text", d.KeyName = b, d.ControlCfg = d.InitControlConfig(Cmn.Extend(d.ControlCfg, c)), d.GetInitHtml = function () { return '<input type="text" style="width:100%;height:100%;border:none; outline: none; text-indent: 5px;" />' }, d.InitControl = function () { d.ControlDom.find(a.Selector.CtlContent).css({ border: " 1px solid #e6e6e6" }), d.ControlDom.find("input").change(function () { d.OnChange.Trigger([this]) }), d.ControlDom.find("input").focus(function () { d.OnFocus.Trigger([this]) }), d.ControlDom.find("input").blur(function () { d.OnBlur.Trigger([this]) }), d.ControlDom.find("input").change(function () { d.OnChange.Trigger([this]) }), d.ControlDom.find("input").keydown(function () { d.OnKeydown.Trigger([this]) }), d.ControlDom.find("input").keyup(function () { d.OnKeyup.Trigger([this]) }) }, d.GetValue = function () { return this.ControlDom.find("input").val() }, d.SetValue = function (a) { this.ControlDom.find("input").val(a) } }, a.Button = function (b, c) { Cmn.Object.Inherit(this, a.BasControl, [b, c]); var d = this; d.Type = "Button", d.KeyName = b, d.ControlCfg = d.InitControlConfig(Cmn.Extend(d.ControlCfg, c)), d.GetInitHtml = function () { return '<div class="cmn-ctl-button" type="text" style="width: 100%; height: 99%; border: 1px solid #DDD; border-radius: 5px; cursor: pointer; text-align: center; font-size: 14px; line-height: 30px; background: #FAFAFA; color: #767474;"> </div>' }, d.InitControl = function () { }, this.SetColDesc = function (a) { this.ControlDom.find(".cmn-Ctl-ColNameContainer").remove(), this.ControlDom.find(".cmn-Ctl-Content").css({ width: "100%" }), this.ControlDom.find(".cmn-ctl-button").html(a) } }, a.Sort = function (b, c) { Cmn.Object.Inherit(this, a.Text, [b, c]), this.Type = "Sort" }, a.Hidden = function (b, c) { Cmn.Object.Inherit(this, a.Text, [b, c]), this.Type = "Hidden", this.GetInitHtml = function () { return '<input type="hidden" style="width:96%;height:76%;margin:1%;padding:1%;border:none;" />' }, this.InitControl = function () { this.ControlDom.hide() } }, a.Number = function (b, c) { Cmn.Object.Inherit(this, a.Text, [b, c]), this.Type = "Number", this.SetValue = function (a) { this.ControlDom.find("input").val(a) }, this.GetValue = function () { return this.ControlDom.find("input").val() } }, a.Money = function (b, c) { Cmn.Object.Inherit(this, a.Text, [b, c]), this.Type = "Money", this.SetValue = function (a) { this.ControlDom.find("input").val(new Number(a).toString() || "0") }, this.GetValue = function () { return new Number(this.ControlDom.find("input").val()).toString() || "0" } }, a.Password = function (b, c) { Cmn.Object.Inherit(this, a.Text, [b, c]), this.Type = "Password", this.GetInitHtml = function () { return '<input type="password" style="width:96%;height:76%;margin:1%;padding:1%;border:none;" />' } }, a.Select = function (b, c) { var d, e, f; Cmn.Object.Inherit(this, a.BasControl, [b, c]), d = this, e = !0, d.Type = "Select", d.SetCfgDescCfg({ FillSql: { Type: "SqlInput", Desc: "数据sql" }, OptionList: { Type: "HasMap", Desc: "数据集" } }), d.ControlCfg = d.InitControlConfig(Cmn.Extend(d.ControlCfg, c)), f = function (a) { var b = d.ControlDom.find("select").empty(); "0" == d.ControlCfg.IsRequired && b.append($("<option value=''></option>")), CmnMis.UI.Control.GetControlData(d.ControlCfg, a, function (a) { var c = a, e = "", f = {}; c && (Cmn.IsType(c, "string") && (c = $.parseJSON(c)), $.each(c, function (a, b) { var c = "", d = "", g = "", h = 0; return Cmn.IsType(b, "object") ? ($.each(b, function (a, b) { 0 == h ? c = b : 1 == h && (d = b, g = a), h++ }), e += '<option cmn-fieldname="' + g + '" value="' + c + '">' + d + "</option>", f[c] = b, void 0) : (Cmn.Log("OptionList : 数据格式违法！必须为json数组"), !1) })), b.append($(e)), d.ControlDom.data("ControlData", f), d.Init(), d.ControlDom.find("select").data("setValue") && (d.SetValue(d.ControlDom.find("select").data("setValue")), d.ControlDom.find("select").data("setValue", void 0)) }) }, d.GetInitHtml = function () { return "<select style = 'width:100%;height:100%;border:none;' ><select/>" }, d.InitControl = function () { var b = d.ControlDom.find("select"); d.ControlDom.find(a.Selector.CtlContent).css({ border: " 1px solid #e6e6e6" }), f(), b.off("change").on("change", function () { var a = d.GetValue(); d.OnChange.Trigger([d.GetValue(), d.GetDesc(), d.ControlDom.data("ControlData")[a]]) }) }, d.ReLoadData = function (a) { f(a) }, d.Init = function () { this.SetValue(this.ControlCfg.Default || "") }, d.GetDescFieldName = function () { return this.ControlDom.find("select").find("option:selected").attr("cmn-fieldname") }, d.GetDesc = function () { return this.ControlDom.find("select").find("option:selected").text() }, d.GetDataByFillSqlFieldName = function (a) { var b = d.ControlDom.data("ControlData"); return b && b[d.GetValue()] ? b[d.GetValue()][a] || "" : "" }, d.SetValue = function (a) { var b = d.ControlDom.data("ControlData") || {}; b[a + ""] || (a = d.ControlDom.find("select").find("option").first().attr("value") || ""), d.ControlDom.find("select").data("setValue", a), d.ControlDom.find("select").val(a), setTimeout(function () { d.ControlDom.find("select").change() }, 500) }, d.GetValue = function () { return this.ControlDom.find("select").val() }, d.SetEnabled = function (b) { e = b; var c = d.ControlDom.find(a.Selector.CtlContent); e ? (c.find("select").attr("disabled", !1), c.css({ border: c.attr("border-value") })) : (c.find("select").attr("disabled", !0), c.attr("border-value", c.css("border")), c.css({ border: "none" }), c.css({ "border-bottom": "1px dashed #e6e6e6" })) }, d.SetFocus = function () { this.ControlDom.find("select").focus() } }, a.CheckBox = function (b, c) { var d, e; Cmn.Object.Inherit(this, a.BasControl, [b, c]), d = this, d.Type = "CheckBox", d.SetCfgDescCfg({ FillSql: { Type: "SqlInput", Desc: "数据sql" }, OptionList: { Type: "HasMap", Desc: "数据集" } }), d.ControlCfg = d.InitControlConfig(Cmn.Extend(d.ControlCfg, c)), e = function (b) { var c = d.ControlDom.find(a.Selector.CtlContent).empty(); CmnMis.UI.Control.GetControlData(d.ControlCfg, b, function (a) { var b = a, e = "", f = {}; b && (Cmn.IsType(b, "string") && (b = $.parseJSON(b)), $.each(b, function (a, b) { var c = "", g = "", h = "", i = 0; return Cmn.IsType(b, "object") ? ($.each(b, function (a, b) { if (0 == i) c = b; else { if (1 != i) return; g = b, h = a } i++ }), e += '<label style=\'cursor: pointer;\'><input type="checkbox" name="' + d.KeyName + '"  value="' + c + "\" style='width:auto;height:auto;vertical-align: middle;' />" + "<b cmn-fieldname='" + h + "' style='margin-right: 10px;'>" + g + "</b></label>", f[c] = b, void 0) : (Cmn.Log("OptionList : 数据格式违法！必须为json数组"), void 0) })), c.append($(e)), d.ControlDom.data("ControlData", f), d.Init(), d.ControlDom.find("select").data("setValue") && (d.SetValue(d.ControlDom.find("select").data("setValue")), d.ControlDom.find("select").data("setValue", void 0)) }) }, d.InitControl = function () { var b = d.ControlDom.find(a.Selector.CtlContent); e(), b.find("input").off("click").on("click", function () { var a = d.GetValue(); d.OnChange.Trigger([d.GetValue(), d.GetDesc(), d.ControlDom.data("ControlData")[a]]) }) }, d.ReLoadData = function (a) { e(a) }, d.GetDescFieldName = function () { return this.ControlDom.find("input:checked").parent("label").find("b").attr("cmn-fieldname") }, d.GetDesc = function () { return this.ControlDom.find("input:checked").parent("label").find("b").text() }, d.Init = function () { this.SetValue(this.ControlCfg.Default || "") }, d.SetValue = function (a) { "1" == a ? this.ControlDom.find("input").attr("checked", "checked") : "0" == a && this.ControlDom.find("input").attr("checked", !1); var b = d.ControlDom.data("ControlData") || {}; d.OnChange.Trigger([a, d.GetDesc(), b[a + ""]]) }, d.GetValue = function () { return d.ControlDom.find("input:checked").val() } }, a.RadioButton = function (b, c) { var d, e; Cmn.Object.Inherit(this, a.BasControl, [b, c]), d = this, d.Type = "RadioButton", d.SetCfgDescCfg({ FillSql: { Type: "SqlInput", Desc: "数据sql" }, OptionList: { Type: "HasMap", Desc: "数据集" } }), d.ControlCfg = d.InitControlConfig(Cmn.Extend(d.ControlCfg, c)), e = function (b) { var c = d.ControlDom.find(a.Selector.CtlContent).empty(); CmnMis.UI.Control.GetControlData(d.ControlCfg, b, function (a) { var b = a, e = "", f = {}; b && (Cmn.IsType(b, "string") && (b = $.parseJSON(b)), $.each(b, function (a, b) { var c = "", g = "", h = "", i = 0; return Cmn.IsType(b, "object") ? ($.each(b, function (a, b) { if (0 == i) c = b; else { if (1 != i) return; g = b, h = a } i++ }), e += '<label style=\'cursor: pointer;\'><input type="radio" name="' + d.KeyName + '"  value="' + c + "\"  style='width:auto;height:auto;vertical-align: middle;' />" + "<b cmn-fieldname='" + h + "' style='margin-right: 10px;'>" + g + "</b><label>", f[c] = b, void 0) : (Cmn.Log("OptionList : 数据格式违法！必须为json数组"), void 0) })), c.append($(e)), d.ControlDom.data("ControlData", f), d.Init(), d.ControlDom.find("select").data("setValue") && (d.SetValue(d.ControlDom.find("select").data("setValue")), d.ControlDom.find("select").data("setValue", void 0)) }) }, d.InitControl = function () { var b = d.ControlDom.find(a.Selector.CtlContent); e(), b.find("input").off("click").on("click", function () { var a = d.GetValue(); d.OnChange.Trigger([d.GetValue(), d.GetDesc(), d.ControlDom.data("ControlData")[a]]) }) }, d.ReLoadData = function (a) { e(a) }, d.Init = function () { this.SetValue(this.ControlCfg.Default || "") }, d.SetValue = function (a) { var c, b = !0; 2 == this.ControlDom.find("input").length && (this.ControlDom.find("input").each(function (a, c) { "1" == $(c).val() || "0" == $(c).val() || (b = !1) }), !b || "True" != a && "False" != a || (a = "True" == a ? "1" : "0")), this.ControlDom.find("input").each(function (b, c) { $(c).val() == a && $(c).attr("checked", "checked") }), c = d.ControlDom.data("ControlData") || {}, d.OnChange.Trigger([a, d.GetDesc(), c[a + ""]]) }, d.GetDescFieldName = function () { return this.ControlDom.find("input:checked").parent("label").find("b").attr("cmn-fieldname") }, d.GetDesc = function () { return this.ControlDom.find("input:checked").parent("label").find("b").text() }, d.GetValue = function () { return d.ControlDom.find("input:checked").val() } }, a.TextArea = function (b, c) { Cmn.Object.Inherit(this, a.BasControl, [b, c]); var d = this, e = !0; d.Type = "TextArea", d.SetCfgDescCfg({ Height: { Type: "Text", Desc: "控件高度", Val: "100" } }), d.ControlCfg = d.InitControlConfig(Cmn.Extend(d.ControlCfg, c)), d.GetInitHtml = function () { return "<textarea style = 'width:90%;height:98%;  text-indent: 5px; outline: none;padding-left: 5px; padding-top: 10px;' /></textarea>" }, d.InitControl = function () { d.ControlDom.find(a.Selector.CtlContent).css({ border: " 1px solid #e6e6e6" }).find("textarea").css({ "padding-top": "10px" }), d.ControlDom.find("textarea").focus(function () { d.OnFocus.Trigger([this]) }), d.ControlDom.find("textarea").blur(function () { d.OnBlur.Trigger([this]) }) }, d.GetValue = function () { return this.ControlDom.find("textarea").val() }, d.SetValue = function (a) { this.ControlDom.find("textarea").val(a) }, d.SetEnabled = function (b) { e = b; var c = d.ControlDom.find(a.Selector.CtlContent); e ? (c.find("textarea").attr("disabled", !1), c.css({ border: c.attr("border-value") })) : (c.find("textarea").attr("disabled", !0), c.attr("border-value", c.css("border")), c.css({ border: "none" }), c.css({ "border-bottom": "1px dashed #e6e6e6" })) }, d.SetFocus = function () { this.ControlDom.find("textarea").focus() } }, a.Label = function (b, c) { Cmn.Object.Inherit(this, a.BasControl, [b, c]); var d = this; d.Type = "Label", d.ControlCfg = d.InitControlConfig(Cmn.Extend(d.ControlCfg, c)), d.GetInitHtml = function () { return "<label class='cmn-ctl-label' style = 'width:100%;height:100%;display:block;text-indent: 5px;' /></label>" }, d.InitControl = function () { d.ControlDom.find(a.Selector.CtlContent).css({ border: " 1px solid #e6e6e6" }) }, d.GetValue = function () { return this.ControlDom.find(".cmn-ctl-label").text() }, d.SetValue = function (a) { this.ControlDom.find(".cmn-ctl-label").text(a) }, d.SetFocus = function () { this.ControlDom.find(".cmn-ctl-label").focus() } }, a.DateSelect = function (b, c) { Cmn.Object.Inherit(this, a.Text, [b, c]); var d = this; this.Type = "DateSelect", d.SetCfgDescCfg({ DateType: { Type: "RadioButton", Desc: "数据类型", Val: [{ key: "date", val: "日期" }, { key: "datetime", val: "日期时间" }] } }), d.ControlCfg = d.InitControlConfig(Cmn.Extend(d.ControlCfg, c)), d.InitControl = function () { d.ControlDom.find(a.Selector.CtlContent).css({ border: " 1px solid #e6e6e6" }), d.ControlDom.find("input"), "datetime" == d.ControlCfg.DateType ? "function" == typeof d.ControlDom.find("input").datetimepicker && d.ControlDom.find("input").datetimepicker({ numberOfMonths: 1, showSecond: !0, showMillisec: !0, timeFormat: "hh:mm:ss" }) : d.ControlDom.find("input").datepicker({ dateFormat: "yy-mm-dd", altField: d.ControlDom }) } }, a.DetailUserForm = function (b, c) { var d, e, f; Cmn.Object.Inherit(this, a.BasControl, [b, c]), d = this, e = !0, d.Type = "DetailUserForm", d.IsSetValByKey = !0, d.SetCfgDescCfg({ UserFormID: { Type: "Text", Desc: "表单代码" }, MainKeyFieldName: { Type: "Text", Desc: "主键字段名称" }, ForeignKeyFieldName: { Type: "Text", Desc: "外键字段名称" }, IsOneToOne: { Type: "RadioButton", Desc: "是否是1对1关系", Val: [{ key: "1", val: "是" }, { key: "0", val: "否" }] }, Width: { Type: "Hidden", Desc: "控件高度", Val: "750" } }), d.ControlCfg = d.InitControlConfig(Cmn.Extend(d.ControlCfg, c)), d.ControlCfg.Height = 0, d.BindUserFormEvent = function (a, b) { var c, e; a.OnAddInitComplete.Add(function () { var c = a.GetControlByName(d.ControlCfg.ForeignKeyFieldName); null != c && (c.SetValue(b), c.SetEnabled(!1)), $(a.GetSelector(".AddMenuBtn")).show() }), c = $(a.GetSelector()).parent(), c.find(".DetailedFormWrap").off("scroll").on("scroll", function () { c.find(".DetailedFormWrap").find(".DetailFormMask").css("top", c.find(".DetailedFormWrap").scrollTop() + "px") }), a.OnUpdateInitComplete.Add(function () { a.CurViewState == a.Cfg.ViewState.Update ? $(a.GetSelector(".AddMenuBtn")).show() : $(a.GetSelector(".AddMenuBtn")).hide() }), a.BeforeGetRecList.Add(function () { $(a.GetSelector(".AddMenuBtn")).hide() }), a.OnCancel.Add(function () { $(a.GetSelector(".AddMenuBtn")).hide(), $(".CloseDetailedFormPopBtn").click() }), a.AfterAddSave.Add(function () { $(".CloseDetailedFormPopBtn").click() }), a.AfterUpdateSave.Add(function () { $(".CloseDetailedFormPopBtn").click() }), a.OnAddClick.Add(function () { e(this, c) }), a.OnUpdateClick.Add(function () { e(this, c) }), e = function (a, b) { var c = b.width(); return b.height(), b.hasClass("DetailedFormPopWrap") ? !1 : (b.addClass("DetailedFormPopWrap"), b.width("100%"), b.height("100%"), $(".CloseDetailedFormPopBtn").show(), b.find(".DetailedFormWrap").find(".DetailFormMask").hide(), $(".CloseDetailedFormPopBtn").bind("click", function () { $(this).unbind("click"), b.removeClass("DetailedFormPopWrap"), b.width(c), b.height(), $(".CloseDetailedFormPopBtn").hide(), b.find(".DetailedFormWrap").find(".DetailFormMask").show(), b.find(".AddMenuBtn").hide(), a.ShowViewState(a.Cfg.ViewState.RecList, !0) }), void 0) } }, f = function (a) { function c(a, c) { if ($(a.GetSelector(".RightContentWrap")).addClass("DetailedFormWrap"), a.InitUserForm(), d.BindUserFormEvent(a, c), a.AfterRecListLoad.Add(function () { e ? ($(a.GetSelector(".MenuAddBtn")).show(), $(a.GetSelector(".cmn-RecListView")).find("table tr").each(function () { $(this).find("td").last().show() })) : ($(a.GetSelector(".MenuAddBtn")).hide(), $(a.GetSelector(".cmn-RecListView")).find("table tr").each(function () { $(this).find("td").last().hide() })) }), $(a.GetSelector(".AddMenuBtn")).hide(), $(a.GetSelector(".ConfigurationFormBtn")).hide(), $(a.GetSelector(".SearchWrap")).hide(), $(a.GetSelector(".FilterSelect")).hide(), $(a.GetSelector(".FindRangeWrap")).hide(), $(b.GetSelector(".cmn-SearchWay")).hide(), $(a.GetSelector(".jscDetailUserFormDesc")).length <= 0) { var f = d.ControlDom.find(".jscDetailUserFormDesc").clone(); f.css({ "margin-left": "2%", height: " 30px", "font-size": "16px", "line-height": "30px", "float": "left", display: "inline-block" }).show().insertAfter($(a.GetSelector(".FilterSelect"))) } $(a.GetUserFormSelector()).find(".MenuFunctionLoacitionInner").css({ "border-bottom": "none" }), $(a.GetSelector(".RightContentWrap")).addClass("DetailedFormWrap") } if ("" != a) { var b = CmnMis.Func.GetDetailUserFormInfoByID(d.ControlCfg.UserFormID); b.SetFixedCondition("[" + d.ControlCfg.ForeignKeyFieldName + "]='" + a + "'"), null != b.TableCache ? b.TableCache.Init(b, d.ControlCfg.ForeignKeyFieldName, a, function () { c(b, a) }) : c(b, a) } }, d.CreateHtml = function () { var b = '<div style="width:100%;height:100%;position:relative;"><div class="cmn-Ctl-ColNameContainer" style="padding-right: 10px;width: 35%; height: 100%; float: left; zoom: 1;  font-size: 16px; color: #505050; line-height: 30px; text-align: right; "><span class="cmn-Ctl-ColName jscDetailUserFormDesc" style="display:none;">:</span></div><div class="cmn-Ctl-Content" style="width: 100%;float: left; height: 100%; zoom: 1; border-radius: 5px; ">' + "<div class='cmn-UserFormTemplate' style='height:100%;'  name='cmn-UserForm" + d.ControlCfg.UserFormID + "_" + CmnMis.CurUserForm.UserFormID + "'></div>" + "</div>" + "</div>"; d.ControlDom.empty().append(b), d.ControlDom.attr("data-control-type", d.Type), d.ControlDom.attr("name", d.KeyName), this.ControlDom.find(a.Selector.ColNameContainer).css({ height: this.ControlCfg.Layout.DescHeight + "px", width: 1 * this.ControlCfg.Layout.DescWidth - 10 + "px", "line-height": (this.ControlCfg.Layout.DescHeight || this.ControlCfg.Height) + "px" }), this.ControlDom.find(a.Selector.CtlContent).css({ width: 1 * this.ControlCfg.Width - 10 + "px" }), this.ControlDom.find(a.Selector.ColNameContainer).css({ width: 1 * this.ControlCfg.DescWidth - 10 + "px" }), this.ControlDom.css({ width: 1 * this.ControlCfg.Layout.DescWidth + 1 * this.ControlCfg.Width }) }, d.InitControl = function () { d.ControlDom.find(a.Selector.CtlContent).css({ border: " 1px solid #e6e6e6" }) }, d.Init = function () { f("99999999") }, d.GetValue = function () { var a = CmnMis.Func.GetDetailUserFormInfoByID(d.ControlCfg.UserFormID); return Cmn.Func.JsonToStr(a.TableCache.GetChangeRecList()) }, d.SetValue = function (a) { setTimeout(function () { f(a) }, 500) }, d.SetEnabled = function (a) { e = a; var b = CmnMis.Func.GetDetailUserFormInfoByID(d.ControlCfg.UserFormID); e ? ($(b.GetSelector(".MenuAddBtn")).show(), $(b.GetSelector(".EditorIconBtn")).show(), $(b.GetSelector(".DelIconBtn")).show(), $(b.GetSelector(".ViewIconBtn")).show()) : ($(b.GetSelector(".MenuAddBtn")).hide(), $(b.GetSelector(".EditorIconBtn")).hide(), $(b.GetSelector(".DelIconBtn")).hide(), $(b.GetSelector(".ViewIconBtn")).hide()) } }, a.DetailMultiCheckbox = function (b, c) { Cmn.Object.Inherit(this, a.BasControl, [b, c]); var d = this; d.Type = "DetailMultiCheckbox", d.IsSetValByKey = !0, d.SelectDataKeyField = "", d.SaveKeyField = "", d.ForeignKeyValue = "", d.CfgDescCfg = { FillSql: { Type: "SqlInput", Desc: "sql" }, SaveTableName: { Type: "Text", Desc: "保存数据的表名" }, ForeignKeyFieldName: { Type: "Text", Desc: "外键名称" }, Width: { Type: "Text", Desc: "控件宽度" }, ItemWidth: { Type: "Text", Desc: "每个选项的宽度" }, Height: { Type: "Text", Desc: "控件高度" } }, d.GetInitHtml = function () { return "<div class='cmn-DetailMultiCheckbox' style='width:100%;height:100%;text-align:left;' name='dmc-" + this.KeyName + "'></div>" }, d.InitControl = function () { CmnMis.UI.Control.GetControlData(this.ControlCfg, "", function (a) { var b, c, e, f, g; if (a.length > 0) { b = "", c = 0; for (e in a[0]) 0 == c ? d.SelectDataKeyField = e : 1 == c && (b = e), c++; for (f = d.ControlCfg["ItemWidth"] || "100", g = 0; g < a.length; g++) d.ControlDom.find(".cmn-DetailMultiCheckbox").append("<div style='display: inline-block;*display:inline;zoom:1; width:" + f + "px;vertical-align:middle;margin:auto 5px;'><input type='checkbox' style='width:auto; vertical-align:middle;display:inline-block;'  value='" + a[g][d.SelectDataKeyField] + "' id='" + d.KeyName + "_" + a[g][d.SelectDataKeyField] + "' /><label style='width:" + (f - 20) + "px;vertical-align:middle;display:inline-block;line-height:13px;word-break:break-all;word-wrap:break-word;' for='" + d.KeyName + "_" + a[g][d.SelectDataKeyField] + "'>" + a[g][b] + "</label></div>"); d.ControlDom.find(".cmn-DetailMultiCheckbox").parent().css("height", "auto").parent().css("height", "auto") } }) }, d.Init = function () { d.SetValue(this.ControlCfg.Default || "") }, d.GetValue = function () { var a = new Array; return this.ControlDom.find("input[type=checkbox]").each(function () { var b; "1" == $(this).attr("OldValue") ? "checked" != $(this).attr("checked") && (b = {}, b[d.SaveKeyField] = $(this).attr(d.SaveKeyField), b["CmnOpt"] = "Delete", a[a.length] = b) : "checked" == $(this).attr("checked") && (b = {}, b[d.SelectDataKeyField] = $(this).val(), b[d.ControlCfg["ForeignKeyFieldName"]] = d.ForeignKeyValue, b["CmnOpt"] = "Add", a[a.length] = b) }), Cmn.Func.JsonToStr(a) }, d.SetValue = function (a) { a ? (d.ForeignKeyValue = a, CmnMis.TableOpt.GetData(d.ControlCfg["SaveTableName"], { Condition: "[" + d.ControlCfg.ForeignKeyFieldName + "]='" + a + "'" }, !1, function (a) { var b, c, e; if (a.data.length > 0) { for (b in a.data[0]) { d.SaveKeyField = b; break } for (c = 0; c < a.data.length; c++) e = d.ControlDom.find("#" + d.KeyName + "_" + a.data[c][d.SelectDataKeyField]), e.length > 0 && (e.attr("checked", "checked"), e.attr("OldValue", "1"), e.attr(d.SaveKeyField, a.data[c][d.SaveKeyField])) } })) : (this.ControlDom.find("input[type=checkbox]").attr("checked", !1), this.ControlDom.find("input[type=checkbox]").attr("OldValue", "")) } }, a.EditExd = function (b, c) { Cmn.Object.Inherit(this, a.BasControl, [b, c]); var d = this, e = !0; d.Type = "EditExd", d.IsSetValByKey = !0, d.SetCfgDescCfg({ SaveTableName: { Type: "Text", Desc: "保存数据的表名" }, ForeignKeyFieldName: { Type: "Text", Desc: "外键名称" } }), d.ControlCfg = d.InitControlConfig(Cmn.Extend(d.ControlCfg, c)), d.InitControl = function () { d.ControlCfg.UserFormID = CmnMis.TableOpt.GetUserForm(d.ControlCfg.SaveTableName).UserFormID, d.ExdFieldContainer = $("<div></div>"), d.ExdFieldContainer.insertAfter(d.ControlDom.hide()), d.BindData() }, d.BindData = function () { $(d.ExdFieldContainer).empty(); var b = CmnMis.TableOpt.GetUserForm(d.ControlCfg.SaveTableName).UserFormID; CmnAjax.PostData(InterfaceUrl + "?method=GetColumnInfo", { CurUserFormID: b }, function (a) { d.CreateExdPanel(a.data) }) }, d.CreateExdPanel = function (b) { var c, e, f; if ($(d.ExdFieldContainer).empty().css({ height: "auto" }), !b) return !1; for (c = 0; c < b.length; c++) e = b[c], "1" == e.IsShowInEdit && (f = null, e.ColName != (d.ControlCfg.ForeignKeyFieldName || CmnMis.CurUserForm.KeyColName) && (e.ControlCfg ? Cmn.IsType(e.ControlCfg, "string") && (e.ControlCfg = $.parseJSON(e.ControlCfg)) : e.ControlCfg = {}, f = a.NewControl(e.ColControlName, e.ColName, e.ControlCfg), f.AppendTo(d.ExdFieldContainer), f.InitControl(), f.SetColDesc(e.ColTitle))) }, d.Init = function () { a.InitValueList(this.ExdFieldContainer) }, d.GetValue = function () { var b = CmnMis.CurUserForm.CurViewState == CmnMis.CurUserForm.Cfg.ViewState.Add, c = { CmnOpt: b ? "Add" : "Update" }; return e || (c = { CmnOpt: "Add" }), c[this.ControlCfg.ForeignKeyFieldName || CmnMis.CurUserForm.KeyColName] = CmnMis.CurUserForm.GetControlByName(this.ControlCfg.ForeignKeyFieldName).GetValue(), Cmn.Func.JsonToStr([$.extend(a.GetValueList(this.ExdFieldContainer), c)]) }, d.SetValue = function (b) { var c = d.ControlCfg.UserFormID, f = d.ControlCfg.ForeignKeyFieldName ? CmnMis.CurUserForm.GetControlByName(d.ControlCfg.ForeignKeyFieldName).GetValue() : b; f && CmnAjax.PostData(InterfaceUrl + "?method=GetRecList", { CurUserFormID: c, RecID: f }, function (b) { Cmn.IsType(b.data, "array") && (b.data.length <= 0 ? e = !1 : $.each(b.data, function () { a.SetValueList(d.ExdFieldContainer, this) })) }) } } }();
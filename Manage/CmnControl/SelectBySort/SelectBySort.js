CmnMis_UI_Control_SelectBySort_Version = "2.1", function () { var a = CmnMis.UI.Control; a.SelectBySort = function (b, c) { Cmn.Object.Inherit(this, a.BasControl, [b, c]); var d = this, e = {}; d.Type = "SelectBySort", d.IsExistHtmlTemp = !0, d.OnDataLoadComplete = new Cmn.Event(d), d.SetCfgDescCfg({ FillSql: { Type: "SqlInput", Desc: "sql或者接口名称" }, SortsPanelWidth: { Type: "Text", Desc: "分类面板的宽度", Val: "250" }, Sorts: { Type: "MultiCfgList", Desc: "分类配置", CfgList: [{ Desc: { Type: "Text", Desc: "类型描述" } }, { FillSql: { Type: "SqlInput", Desc: "sql语句" } }, { ForeignKeyFieldName: { Type: "Text", Desc: "外键字段" } }, { ParentIDFieldName: { Type: "Text", Desc: "分类父代码字段名称" } }] }, DisplayFieldCount: { Type: "Text", Desc: "显示字段的个数", Val: "2" }, Limit: { Type: "Text", Desc: "显示的数据条数", Val: "10" } }), d.ControlCfg = d.InitControlConfig(Cmn.Extend(d.ControlCfg, c)), d.InterfaceUrl = InterfaceUrl, d.InitControl = function () { var g, h, i, j, k, l, c = Cmn.GetUUID(); if (d.ControlCfg = Cmn.Extend({ Sorts: [] }, d.ControlCfg), Cmn.IsType(d.ControlCfg.Sorts, "string")) try { d.ControlCfg.Sorts = $.parseJSON(d.ControlCfg.Sorts) } catch (f) { d.ControlCfg.Sorts = [] } Cmn.UI && Cmn.UI.BasPlugin || CmnAjax.Func.LoadJs(Cmn.Func.GetRoot() + "Js/CmnUI/CmnUI.js"), Cmn.UI && Cmn.UI.AutoComplete || CmnAjax.Func.LoadJs(Cmn.Func.GetRoot() + "Js/CmnUI/AutoComplete/AutoComplete.js"), d.AutoComplete = new Cmn.UI.AutoComplete(d.ControlDom.find("input"), d.InterfaceUrl), d.AutoComplete.SerializeParam = function (a) { return { method: "ExecSql", param: a, Limit: d.ControlCfg.Limit, DisplayFieldCount: d.ControlCfg.DisplayFieldCount, ExecSql: d.ControlCfg.FillSql } }, d.AutoComplete.OnDataLoadComplete.Add(function (a) { d.OnDataLoadComplete.Trigger([a]) }, "cmn-Control-SelectBySort-OnDataLoadComplete"), d.AutoComplete.OnChange.Add(function (a, b, c) { d.OnChange.Trigger([a, b, c]) }, "cmn-Control-SelectBySort-OnChange"), d.ControlCfg.Sorts.length <= 0 ? (d.ControlDom.find(".cmn-SelectBySort-FilterBtn").hide(), d.ControlDom.find("input").css({ width: "100%" })) : (g = d.ControlDom.find(".cmn-SelectBySort-FilterPanel").width(d.ControlCfg.SortsPanelWidth || 500), h = d.ControlDom.find(".cmn-SelectBySort-Content"), i = {}, j = function () { var a = { right: "35px", top: -1 * (g.outerHeight() / 2 - d.ControlCfg.Height / 2) }; g.css(a), g.offset().top < Cmn.Func.GetParentOffset(d.ControlDom).top && (a.top += Cmn.Func.GetParentOffset(d.ControlDom).top - g.offset().top), g.css(a) }, k = function () { h.empty(), $.each(d.ControlCfg.Sorts.reverse(), function (a, b) { var c = $("<span title='" + b.Desc + "'>" + b.Desc + " </span>"); c.data("DataCfg", b), h.append(c) }), 1 == d.ControlCfg.Sorts.length && d.ControlDom.find(".cmn-SelectBySort-Content span").click() }, d.ControlDom.find(".cmn-SelectBySort-ContentContainer").attr("id", "jsc" + c), l = function () { var l, b = $.extend({ OptionList: [] }, $(this).data("DataCfg")), f = $(this).attr("recid"), g = "[" + b["ParentIDFieldName"] + "]" + (f ? " = " + f : " is null"); return b["OptionList"] = e[b.Desc + "_" + f], l = $("<b title='" + $(this).attr("title") + "' recid='" + ($(this).attr("recid") || "") + "'>" + $(this).attr("title") + "→ </span>"), l.data("DataCfg", b), d.ControlDom.find(".cmn-SelectBySort-ContentTools").append(l), d.ControlDom.find(".cmn-SelectBySort-ContentPgn").hide(), "root" == f ? (k(), !1) : (a.GetControlData(b, g, function (a) { h.empty(), Cmn.IsType(a, "string") && "" != a && (a = $.parseJSON(a)), a && a.length > 0 ? (i = b, e[b.Desc + "_" + f] = a, $.each(a, function (a, c) { var g, d = "", e = "", f = 0; $.each(c, function (a, b) { 0 == f ? d = b : 1 == f && (e = b), f++ }), g = $("<span title='" + e + "' recid='" + d + "'>" + e + " </span>"), g.data("DataCfg", b), h.append(g) }), j()) : CmnAjax.DataPaging("", InterfaceUrl, { method: "ExecSql", ExecSql: d.ControlCfg.FillSql, Where: f ? "[" + b["ForeignKeyFieldName"] + "] = " + f : void 0 }, "#jsc" + c + " .cmn-SelectBySort-ContentPgn", 6, function (a) { h.empty(), a && a.data && a.data.length > 0 && (d.ControlDom.find(".cmn-SelectBySort-ContentPgn").show(), $.each(a.data, function (a, b) { var f, c = "", d = "", e = 0; $.each(b, function (a, b) { 0 == e ? c = b : 1 == e && (d = b), e++ }), f = $("<div title='" + d + "' recid='" + c + "'>" + d + " </div>"), f.data("Data", b), h.append(f) })) }) }), void 0) }, d.ControlDom.find(".cmn-SelectBySort-FilterPanel").on("mouseleave", function () { d.ControlDom.find(".cmn-SelectBySort-FilterBtn").css("background", "#FFF"), d.ControlDom.find(".cmn-SelectBySort-FilterBtn").attr("state", "close"), g.hide() }), d.ControlDom.find(".cmn-SelectBySort-FilterPanel").undelegate(".cmn-SelectBySort-Content span", "click").delegate(".cmn-SelectBySort-Content span", "click", l), d.ControlDom.find(".cmn-SelectBySort-FilterPanel").undelegate(".cmn-SelectBySort-ContentTools b", "click").delegate(".cmn-SelectBySort-ContentTools b", "click", function () { var b, a = d.ControlDom.find(".cmn-SelectBySort-ContentTools b"); for (l.call(this), b = $(this).index() ; b < a.length; b++) a.eq(b).remove() }), d.ControlDom.find(".cmn-SelectBySort-FilterPanel").undelegate(".cmn-SelectBySort-Content div", "click").delegate(".cmn-SelectBySort-Content div", "click", function () { d.AutoComplete.SetValue($(this).data("Data")), d.ControlDom.find(".cmn-SelectBySort-FilterBtn").css("background", "#FFF"), d.ControlDom.find(".cmn-SelectBySort-FilterBtn").attr("state", "close"), g.hide() }), d.ControlDom.find(".cmn-SelectBySort-FilterBtn").on("click", function () { return "open" === $(this).attr("state") ? ($(this).css("background", "#FFF"), $(this).attr("state", "close"), g.hide(), !1) : ($(this).css("background", "#F4F4F4"), $(this).attr("state", "open"), d.ControlDom.find(".cmn-SelectBySort-ContentTools b").not("b[recid=root]").remove(), k(), g.show(), j(), void 0) })) }, d.GetValue = function () { return d.AutoComplete.GetValue() }, d.SetValue = function (a) { "undefined" != Cmn.IsType(a) && "" != a && null != a ? CmnAjax.PostData(d.InterfaceUrl, { method: "ExecSql", Limit: "1", ExecSql: d.ControlCfg.FillSql, param: a }, function (a) { d.AutoComplete.SetValue(a.data) }) : d.AutoComplete.SetValue() }, d.Init = function () { d.SetValue(d.ControlCfg.Default || "") } } }();
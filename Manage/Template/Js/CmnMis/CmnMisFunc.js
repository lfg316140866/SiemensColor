CmnMis_Func_Version = "2.0", "undefined" == typeof CmnMis && (CmnMis = {}), function () { CmnMis.Func = { GetItfUrl: function (a, b) { return Cmn.Func.AddParamToUrl(Cmn.Func.AddParamToUrl(a.ItfUrl, "CurUserFormID=" + a.UserFormID), "method=" + b) }, IsLoginFromAjax: function (a) { return "0" == a.IsSuccess && void 0 != a.HasNoLogin && "1" == a.HasNoLogin ? (Cmn.alert("由于长时间未操作，需要重新登录！"), window.location.href = Cmn.Func.GetRoot() + "Manage/Login.html?SysName=" + Cmn.Func.GetParamFromUrl("SysName", window.location.href), !1) : !0 }, SetTitle: function () { document.title = CmnMis.Func.GetSysCfg("SysName") + "管理后台" }, GetUserFormByID: function (a) { for (var b = 0; b < CmnMis.Frame.UserFormList.length; b++) if (CmnMis.Frame.UserFormList[b].UserFormID == a) return CmnMis.Frame.UserFormList[b]; return null }, GetUserFormIDByDesc: function (a) { var c, b = ""; for (c = 0; c < CmnMis.Frame.UserFormList.length; c++) if (CmnMis.Frame.UserFormList[c].UserFormDesc == a) { b = CmnMis.Frame.UserFormList[c].UserFormID; break } return "" == b && CmnMis.TableOpt.GetData("cmn_usr_userform", { Condition: "[formdesc]='" + a + "'" }, !0, function (a) { a.data.length > 0 && (b = a.data[0]["userformid"]) }), b }, SetUserFormCol_UserFormID: "", ShowSetUserFormCol: function (a, b) { return "" == CmnMis.Func.SetUserFormCol_UserFormID && (CmnMis.Func.SetUserFormCol_UserFormID = CmnMis.Func.GetUserFormIDByDesc("表单字段配置"), "" == CmnMis.Func.SetUserFormCol_UserFormID) ? (Cmn.alert("找不到用户表单名称为'表单字段配置'的用户表单，请到用户表单管理中检查表单名称。"), void 0) : (CmnMis.Frame.ShowUserForm(CmnMis.Func.SetUserFormCol_UserFormID, { ViewState: CmnMis.CurUserForm.Cfg.ViewState.RecList, Condition: "[userformid]=" + a, ReturnUserFormID: b }), void 0) }, DetailUserFormList: new Array, GetDetailUserFormInfoByID: function (a) { var c, d, b = null; for (c = 0; c < CmnMis.Func.DetailUserFormList.length; c++) if (CmnMis.Func.DetailUserFormList[c].UserFormID == a) { b = CmnMis.Func.DetailUserFormList[c]; break } if (null == b) { for (d = CmnAjax.GetData(InterfaceUrl + "?method=GetUserFormInfo", "{UserFormID:'" + a + "'}"), CmnMis.Func.IsLoginFromAjax(d), b = new CmnMis.UserForm, b.IsDetailUserForm = !0, b.ParentUserFormID = CmnMis.CurUserForm.UserFormID, b.ColInfo = d.data, b = CmnMis.Func.CheckColInfo(b), b.KeyColName = d.KeyColName, b.ItfUrl = InterfaceUrl, b.UserFormUrl = d.formurl, b.UserFormID = d.userformid, b.UserFormDesc = d.formdesc, b.ModuleDesc = d.userformmoduledesc, b.ModuleID = d.userformmoduleid, b.TableName = d.tablename, b.ListTemplateFileName = d.ListTemplateFileName, b.EditTemplateFileName = d.EditTemplateFileName, b.JsTemplateFileName = d.JsTemplateFileName, b.AllowAdd = d["AllowAdd"], b.AllowDell = d["AllowDell"], b.AllowModify = d["AllowModify"], b.AllowToExcel = d["AllowToExcel"], b.RecPageSize = null == d.pagesize ? 15 : d.pagesize, c = 0; c < b.ColInfo.length; c++) "1" == b.ColInfo[c].IsShowInGrid && (b.ColInfoRecList[b.ColInfoRecList.length] = b.ColInfo[c]); b.TableCache = new CmnMis.TableCache, CmnMis.Func.DetailUserFormList[CmnMis.Func.DetailUserFormList.length] = b } return b.ParentUserFormID = CmnMis.CurUserForm.UserFormID, b }, SysCfgCache: {}, GetSysCfg: function (a, b) { var c, d; return "" == a || void 0 == a || null == a ? "" : (void 0 == b && (b = !0), c = null, b && (c = CmnMis.Func.SysCfgCache[a]), (null == c || void 0 == c) && (d = CmnAjax.GetData(Cmn.Func.AddParamToUrl(CmnMis.Func.GetCmnItfUrl(), "method=GetSysCfg"), "{CfgKey:'" + a + "'}"), void 0 != d && "1" == d.IsSuccess ? (c = d.CfgValue, (void 0 == c || null == c) && (c = ""), b && (CmnMis.Func.SysCfgCache[a] = c)) : c = ""), c) }, SubmitData: function (containerSelector, methodName, param, checkRegular, errDispSelector, submitingHintSelector, successFunc, errorFunc) { if (CmnMis.UI.Control.VerifyControlInput(containerSelector, errDispSelector, function (a) { errorFunc ? !errorFunc(a) == !1 && Cmn.alert(a.Msg) : Cmn.alert(a.Msg) }) !== !1) { var _data = CmnMis.UI.Control.GetValueList(containerSelector); param && "" != param && (Cmn.Func.IsString(param) && (param = eval("(" + param + ")")), $.extend(_data, param)), CmnAjax.PostData(methodName, _data, function (a) { CmnMis.Func.IsLoginFromAjax(a), null != successFunc && void 0 != successFunc && successFunc(a) }, errorFunc) } }, CheckColInfo: function (userforminfo) { return $.each(userforminfo.ColInfo, function (index, item) { "" == item.ControlCfg ? item.ControlCfg = {} : "string" == typeof item.ControlCfg && (userforminfo.ColInfo[index].ControlCfg = eval("(" + item.ControlCfg + ")")), userforminfo.ColInfo[index].ColWidth = userforminfo.ColInfo[index].ColWidth + "px", void 0 == userforminfo.ColInfo[index].ControlCfg["Default"] && "" != userforminfo.ColInfo[index].DefaultValue && (userforminfo.ColInfo[index].ControlCfg["Default"] = userforminfo.ColInfo[index].DefaultValue), userforminfo.ColInfo[index].ControlCfg["IsRequired"] = userforminfo.ColInfo[index].IsRequired, userforminfo.ColInfo[index].ControlCfg["RegexContent"] = userforminfo.ColInfo[index].RegexContent, userforminfo.ColInfo[index].ControlCfg["RegexErrorMsg"] = userforminfo.ColInfo[index].RegexErrorMsg, userforminfo.ColInfo[index].ControlCfg["ColTitle"] = userforminfo.ColInfo[index].ColTitle, userforminfo.ColInfo[index].ControlCfg["ColHint"] = userforminfo.ColInfo[index].ColHint, userforminfo.KeyColName == userforminfo.ColInfo[index].ColName && (userforminfo.ColInfo[index].ControlCfg["IsRequired"] = "0") }), userforminfo }, GetLoginUserID: function () { var a = CmnAjax.GetData(Cmn.Func.AddParamToUrl(CmnMis.Func.GetCmnItfUrl(), "method=GetUserID")); return a.UserID }, CurUserIsSysAdmin: null, IsSysAdmin: function () { if (null == CmnMis.Func.CurUserIsSysAdmin) { var a = CmnAjax.GetData(Cmn.Func.AddParamToUrl(CmnMis.Func.GetCmnItfUrl(), "method=IsSysAdmin")); CmnMis.Func.CurUserIsSysAdmin = "1" == a["IsSysAdmin"] ? !0 : !1 } return CmnMis.Func.CurUserIsSysAdmin }, CmnInterfaceUrl: InterfaceUrl, HasSetCmnInterfaceUrl: !1, GetCmnItfUrl: function (a) { 0 == CmnMis.Func.HasSetCmnInterfaceUrl && (CmnMis.Func.CmnInterfaceUrl = InterfaceUrl, CmnMis.Func.HasSetCmnInterfaceUrl = !0), ("" == CmnMis.Func._Cmn || void 0 == CmnMis.Func.CmnInterfaceUrl) && CmnMis.Func.SetCmnItfUrl(InterfaceUrl); var b = CmnMis.Func.CmnInterfaceUrl; return void 0 != a && "" != a && (b = Cmn.Func.AddParamToUrl(b, "method=" + a)), b }, SetCmnItfUrl: function (a) { CmnMis.Func.CmnInterfaceUrl = a, CmnMis.Func.HasSetCmnInterfaceUrl = !0 }, HasRight: function (a, b) { var d, c = ""; return c = Cmn.Func.IsString(a) ? a : a.UserFormID, d = CmnAjax.GetData(CmnMis.Func.GetCmnItfUrl("HasRight"), { UserFormID: c, RightName: b }), void 0 != d && "1" == d.HasRight ? !0 : !1 }, Translate: function (a) { var b = "method=Translate"; return b = Cmn.Func.AddParamToUrl(CmnMis.Func.GetCmnItfUrl(), b), _retData = CmnAjax.GetData(b, { Txt: a }), _retData.TranslateTxt }, LanguageType: { Chinese: "chinese", English: "english" }, CurLanguageType: "", GetCurLanguage: function () { return "" === CmnMis.Func.CurLanguageType && (_retData = CmnAjax.GetData(Cmn.Func.AddParamToUrl(CmnMis.Func.GetCmnItfUrl(), "method=GetCurLanguageType")), CmnMis.Func.CurLanguageType = _retData.CurLanguageType), CmnMis.Func.CurLanguageType }, FormatString: function (a, b) { var c = a; return "" == c ? c : (b = Cmn.Func.Trim(b.replace("{0:", "").replace("}", "")), b.indexOf("-") > 0 || b.indexOf("/") > 0 ? c = CmnMis.Func.FormatDate(a, b) : "f" == b[0] && (c = parseFloat(a).toFixed(parseInt(b.replace("f", "")))), c) }, FormatDate: function (a, b) { if (a) { switch (b || (b = "yyyy-MM-dd"), typeof a) { case "string": a = new Date(a.replace(/-/g, "/")); break; case "number": a = new Date(a) } if (!(!a instanceof Date)) { var c = { yyyy: a.getFullYear(), M: a.getMonth() + 1, d: a.getDate(), H: a.getHours(), m: a.getMinutes(), s: a.getSeconds(), MM: ("" + (a.getMonth() + 101)).substr(1), dd: ("" + (a.getDate() + 100)).substr(1), HH: ("" + (a.getHours() + 100)).substr(1), mm: ("" + (a.getMinutes() + 100)).substr(1), ss: ("" + (a.getSeconds() + 100)).substr(1) }; return b.replace(/(yyyy|MM?|dd?|HH?|ss?|mm?)/g, function () { return c[arguments[0]] }) } } }, RootPathToManageDir: function (a) { return a = Cmn.Func.Trim(a), "/" == a.charAt(0) ? a = Cmn.Func.AddSiteRoot(a) : null == a.match(/^http:/i) && (a = "../" + a), a } } }(), function () { CmnMis.Hint = { Show: function () { var b, c, d, a = $("body").find(".cmn-ProcessInHintLayer"); a.length <= 0 && (a = $('<div class="cmn-ProcessInHintLayer" style="display: none;overflow:hidden; width: 100%; height: 100%; position: fixed; right: 0px; top: 0px; z-index: 10001"></div>'), a.append('<div style="position: absolute; width: 100%; height: 100%; background: #ccc; filter: alpha(opacity=70); opacity: 0.7;z-index:1;"></div>'), b = $('<div style="position: absolute;left:50%;top:50%;color:#5C4F4F;text-align: center;z-index:2;width:150px;height:100px;margin-top:-75px;margin-left:-75px;"></div>'), b.append('<img style="width:60px;" src="Image/frame/frame_ProcessInHint.gif" /><div class="cmn-ProcessInHintText" style="font-size: 16px; width: 100px; margin: auto; text-align: left; ">Please wait<b style="font-size:20px;">...</b></div>'), a.append(b), $("body").append(a)), c = 0, d = a.find(".cmn-ProcessInHintText b"), a[0].setintervalkey = setInterval(function () { 0 == c ? d.html("") : 1 == c ? d.html(".") : 2 == c ? d.html("..") : 3 == c && (d.html("..."), c = -1), c++ }, 400), a.show() }, Hide: function () { clearInterval($("body").find(".cmn-ProcessInHintLayer")[0].setintervalkey), $("body").find(".cmn-ProcessInHintLayer").hide() } }, CmnMis.PopWin = { PopWinType: { Right: "left", Center: "Center" }, Show: function (a) { var e, d = $(".cmnMisFunc-PopWin-Container"); d.length <= 0 && (d = $('<div class="cmnMisFunc-PopWin-Container"></div>'), d.attr("style", "display: none;overflow:hidden; width: 100%; height: 100%;position: fixed; right: 0px; top: 0px; z-index: 10001"), e = $('<div class="cmnMisFunc-PopWin-Mask"></div>'), e.attr("style", "position: absolute; width: 100%; height: 100%; background: #ccc;filter: alpha(opacity=70); opacity: 0.7;z-index:1;"), d.append(e), $("body").append(d)), d.find(a).length <= 0 }, Hide: function () { }, HideAll: function () { } } }();